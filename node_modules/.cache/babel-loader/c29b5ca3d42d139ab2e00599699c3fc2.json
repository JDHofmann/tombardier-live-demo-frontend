{"ast":null,"code":"const userId = 3;\nexport const baseUrl = \"https://tranquil-wildwood-35160.herokuapp.com\";\nexport const fetchUser = () => {\n  return dispatch => {\n    fetch(`${baseUrl}/users/${userId}`).then(resp => resp.json()).then(userData => dispatch({\n      type: 'LOAD_USER',\n      user: userData\n    }));\n  };\n};\nexport const submitLogin = loginObj => {\n  return dispatch => {\n    fetch(`${baseUrl}/login`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: loginObj\n      })\n    }).then(r => r.json()).then(data => {\n      console.log(\"data\", data); // if(!data.message === \"Invalid username or password\"){\n\n      localStorage.setItem(\"token\", data.jwt);\n      dispatch({\n        type: 'SET_CURRENT_USER',\n        currentUser: data.user\n      }); // } else {\n      //     dispatch({\n      //         type: 'REMOVE_CURRENT_USER'\n      //     })\n      // }\n    });\n  };\n};\nexport const handleLogout = () => {\n  return {\n    type: 'REMOVE_CURRENT_USER'\n  };\n};\nexport const fetchCurrentUser = token => {\n  return dispatch => {\n    fetch(`${baseUrl}/profile`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(resp => resp.json()).then(data => dispatch({\n      type: 'SET_CURRENT_USER',\n      currentUser: data\n    }));\n  };\n};\nexport const editAccountInfo = patchObj => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/users/${userId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(patchObj)\n    }).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const editSiteInfo = patchObj => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/users/${userId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(patchObj)\n    }).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const editLinkInfo = patchObj => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/${patchObj.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(patchObj)\n    }).then(resp => resp.json()).then(updatedLink => dispatch(fetchUser()));\n  };\n};\nexport const deleteUserLink = id => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const createUserLink = (newObj, userId) => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/user_links`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({ ...newObj,\n        user_id: userId\n      })\n    }).then(resp => resp.json()).then(updatedLink => dispatch(fetchUser()));\n  };\n};\nexport const newUserImage = imageformData => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    let options = {\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: imageformData\n    };\n    fetch(`${baseUrl}/users/${userId}`, options).then(resp => resp.json()).then(useless => dispatch(fetchUser()));\n  };\n};\nexport const createProject = newProjObj => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/projects`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(newProjObj)\n    }).then(resp => resp.json()).then(useless => dispatch(fetchUser()));\n  };\n};\nexport const updateProject = patchObj => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/projects/${patchObj.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(patchObj)\n    }).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const deleteProject = id => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/projects/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const newProjectImage = (newImage, projectImageId) => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    let options = {\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: newImage\n    };\n    fetch(`${baseUrl}/project_images/${projectImageId}`, options).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const brandnewProjectImage = newImage => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    let options = {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: newImage\n    };\n    fetch(`${baseUrl}/project_images`, options).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const deleteProjectImage = id => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    fetch(`${baseUrl}/project_images/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};\nexport const createProjectLink = (newObj, projectId) => {\n  const token = localStorage.getItem(\"token\");\n  return dispatch => {\n    console.log(newObj, projectId);\n    fetch(`${baseUrl}/project_links`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({ ...newObj,\n        project_id: projectId\n      })\n    }).then(resp => resp.json()).then(updatedLink => dispatch(fetchUser()));\n  };\n};\nexport const editProjectLink = patchObj => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    fetch(`${baseUrl}/project_links/${patchObj.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(patchObj)\n    }).then(resp => resp.json()).then(updatedLink => dispatch(fetchUser()));\n  };\n};\nexport const deleteProjectLink = id => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    fetch(`${baseUrl}/project_links/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(resp => resp.json()).then(data => dispatch(fetchUser()));\n  };\n};","map":{"version":3,"sources":["/Users/jdbrewer-hofmann/Development/code/tombardier-live-demo/tombardier-live-demo-frontend/src/redux/actions.js"],"names":["userId","baseUrl","fetchUser","dispatch","fetch","then","resp","json","userData","type","user","submitLogin","loginObj","method","headers","body","JSON","stringify","r","data","console","log","localStorage","setItem","jwt","currentUser","handleLogout","fetchCurrentUser","token","Authorization","editAccountInfo","patchObj","getItem","editSiteInfo","editLinkInfo","id","updatedLink","deleteUserLink","createUserLink","newObj","user_id","newUserImage","imageformData","options","useless","createProject","newProjObj","updateProject","deleteProject","newProjectImage","newImage","projectImageId","brandnewProjectImage","deleteProjectImage","createProjectLink","projectId","project_id","editProjectLink","deleteProjectLink"],"mappings":"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","sourcesContent":["const userId = 3\nexport const baseUrl = \"https://tranquil-wildwood-35160.herokuapp.com\"\n\nexport const fetchUser = () => {\n    return (dispatch) => {\n        fetch(`${baseUrl}/users/${userId}`)\n        .then(resp => resp.json())\n        .then(userData => dispatch({\n            type: 'LOAD_USER',\n            user: userData\n        }))\n    }\n}\n\nexport const submitLogin = (loginObj) => {\n    return (dispatch) => {\n        fetch(`${baseUrl}/login`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accepts\":\"application/json\"\n            },\n            body: JSON.stringify({\n                user: loginObj\n            })\n            })\n            .then(r => r.json())\n            .then(data => {\n            console.log(\"data\", data)\n            // if(!data.message === \"Invalid username or password\"){\n                localStorage.setItem(\"token\", data.jwt)\n                dispatch({\n                    type: 'SET_CURRENT_USER',\n                    currentUser: data.user\n                })\n            // } else {\n            //     dispatch({\n            //         type: 'REMOVE_CURRENT_USER'\n            //     })\n            // }\n        })\n    }\n}\n\nexport const handleLogout = () => {\n    return {\n        type: 'REMOVE_CURRENT_USER'\n    }\n}\n\nexport const fetchCurrentUser = (token) => {\n    return (dispatch) => {\n        fetch(`${baseUrl}/profile`,{\n            method: \"GET\",\n            headers: { Authorization: `Bearer ${token}`}\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch({\n            type: 'SET_CURRENT_USER',\n            currentUser: data\n        }))\n    }\n}\n\nexport const editAccountInfo = (patchObj) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/users/${userId}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify(patchObj)\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const editSiteInfo = (patchObj) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/users/${userId}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify(patchObj)\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const editLinkInfo = (patchObj) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/${patchObj.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify(patchObj)\n        })\n        .then(resp => resp.json())\n        .then(updatedLink => dispatch(fetchUser()))\n    }\n}\n\nexport const deleteUserLink = (id) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const createUserLink = (newObj, userId) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/user_links`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({...newObj, user_id: userId})\n        })\n        .then(resp => resp.json())\n        .then(updatedLink => dispatch(fetchUser()))\n    }\n}\n\nexport const newUserImage = (imageformData) => {\n    const token = localStorage.getItem(\"token\")\n\n    return (dispatch) => {\n        let options = {\n            method: \"PATCH\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            },\n            body: imageformData\n        }\n        fetch(`${baseUrl}/users/${userId}`, options)\n        .then(resp => resp.json())\n        .then(useless => dispatch(fetchUser()))\n    }\n}\n\nexport const createProject = (newProjObj) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/projects`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify(newProjObj)\n        })\n        .then(resp => resp.json())\n        .then(useless => dispatch(fetchUser()))\n    }\n}\n\nexport const updateProject = (patchObj) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/projects/${patchObj.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify(patchObj)\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const deleteProject = (id) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/projects/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const newProjectImage = (newImage, projectImageId) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        let options = {\n            method: \"PATCH\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            },\n            body: newImage\n        }\n        fetch(`${baseUrl}/project_images/${projectImageId}`, options)\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const brandnewProjectImage = (newImage) => {\n    return (dispatch) => {\n        const token = localStorage.getItem(\"token\")\n        let options = {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            },\n            body: newImage\n        }\n        fetch(`${baseUrl}/project_images`, options)\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const deleteProjectImage = (id) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        fetch(`${baseUrl}/project_images/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}\n\nexport const createProjectLink = (newObj, projectId) => {\n    const token = localStorage.getItem(\"token\")\n    return (dispatch) => {\n        console.log(newObj, projectId)\n        fetch(`${baseUrl}/project_links`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({...newObj, project_id: projectId})\n        })\n        .then(resp => resp.json())\n        .then(updatedLink => dispatch(fetchUser()))\n    }\n}\n\nexport const editProjectLink = (patchObj) => {\n    return (dispatch) => {\n        const token = localStorage.getItem(\"token\")\n        fetch(`${baseUrl}/project_links/${patchObj.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\":\"application/json\",\n                \"accept\":\"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify(patchObj)\n        })\n        .then(resp => resp.json())\n        .then(updatedLink => dispatch(fetchUser()))\n    }\n}\n\nexport const deleteProjectLink = (id) => {\n    return (dispatch) => {\n        const token = localStorage.getItem(\"token\")\n        fetch(`${baseUrl}/project_links/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(resp => resp.json())\n        .then(data => dispatch(fetchUser()))\n    }\n}"]},"metadata":{},"sourceType":"module"}