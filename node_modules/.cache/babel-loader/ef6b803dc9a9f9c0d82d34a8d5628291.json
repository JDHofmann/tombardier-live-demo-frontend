{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jdbrewer-hofmann/Development/code/tombardier-live-demo/frontend/src/components/ProjectImages.js\";\nimport React from 'react';\nimport LocalEditBtn from '../components/LocalEditBtn';\nimport ProjectImageForm from './ProjectImageForm';\n\nclass ProjectImages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      image: null,\n      tempImage: `http://localhost:3000/${this.props.image.image}`,\n      editMode: false\n    };\n\n    this.toggleEditMode = () => {\n      this.setState(prevState => ({\n        editMode: !prevState.editMode\n      }));\n    };\n\n    this.handleFileChange = e => {\n      const uploadingFile = e.target.files[0];\n      const fileReader = new FileReader();\n\n      fileReader.onloadend = () => {\n        this.setState({\n          image: uploadingFile,\n          tempImage: fileReader.result\n        });\n      };\n\n      if (uploadingFile) {\n        fileReader.readAsDataURL(uploadingFile);\n      }\n    };\n\n    this.handleImageSubmit = e => {\n      e.preventDefault();\n      let projectImageId = this.props.image.id;\n      console.log(projectImageId);\n      const formData = new FormData();\n\n      if (this.state.image) {\n        formData.append('project_image[image]', this.state.image);\n      }\n\n      this.props.newProjectImage(formData, projectImageId);\n      this.setState({\n        editMode: false\n      });\n    };\n\n    this.handleDelete = () => {\n      this.props.deleteProjectImage(this.props.image.id);\n    };\n\n    this.renderPreview = () => {\n      return this.state.tempImage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"pj-image\",\n          alt: \"\",\n          src: this.state.tempImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"image-prev-statement\",\n          children: \"How does that look?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this) : null;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pj-image-container\",\n      children: this.state.editMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [this.renderPreview(), /*#__PURE__*/_jsxDEV(ProjectImageForm, {\n          preview: this.preview,\n          handleFileChange: this.handleFileChange,\n          handleImageSubmit: this.handleImageSubmit,\n          handleDelete: this.handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-sub-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"pj-image grid-1-4\",\n          alt: \"\",\n          src: `http://localhost:3000/${this.props.image.image}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LocalEditBtn, {\n          editMode: this.state.editMode,\n          toggleEditMode: this.toggleEditMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ProjectImages;","map":{"version":3,"sources":["/Users/jdbrewer-hofmann/Development/code/tombardier-live-demo/frontend/src/components/ProjectImages.js"],"names":["React","LocalEditBtn","ProjectImageForm","ProjectImages","Component","state","image","tempImage","props","editMode","toggleEditMode","setState","prevState","handleFileChange","e","uploadingFile","target","files","fileReader","FileReader","onloadend","result","readAsDataURL","handleImageSubmit","preventDefault","projectImageId","id","console","log","formData","FormData","append","newProjectImage","handleDelete","deleteProjectImage","renderPreview","render","preview"],"mappings":"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","sourcesContent":["import React from 'react'\nimport LocalEditBtn from '../components/LocalEditBtn'\nimport ProjectImageForm from './ProjectImageForm';\n\n\n\nclass ProjectImages extends React.Component {\n    state = {\n        image: null,\n        tempImage: `http://localhost:3000/${this.props.image.image}`,\n        editMode: false\n    }\n\n    toggleEditMode = () => {\n        this.setState( prevState => ({\n            editMode: !prevState.editMode\n        }) )\n    }\n\n    handleFileChange = (e) => {\n        const uploadingFile = e.target.files[0]\n        const fileReader = new FileReader();\n        fileReader.onloadend = () => {\n            this.setState({\n            image: uploadingFile,\n            tempImage: fileReader.result\n        })\n        }\n        if (uploadingFile){\n            fileReader.readAsDataURL(uploadingFile)\n        } \n    }\n\n    handleImageSubmit = (e) => {\n        e.preventDefault()\n        let projectImageId = this.props.image.id\n        console.log(projectImageId)\n        const formData = new FormData();\n        if(this.state.image){\n          formData.append('project_image[image]', this.state.image)\n        }\n        this.props.newProjectImage(formData, projectImageId)\n        this.setState({\n            editMode: false\n        })\n    }\n\n    handleDelete = () => {\n        this.props.deleteProjectImage(this.props.image.id)\n    }\n\n    renderPreview = () => {\n        return this.state.tempImage ? \n        <div>\n        <img \n            className=\"pj-image\"\n            alt=\"\" \n            src={this.state.tempImage}>\n            </img>\n                <p className=\"image-prev-statement\">How does that look?</p>\n        </div> : null\n    }\n\n    render(){\n        return(\n            <div className=\"pj-image-container\">\n                { this.state.editMode ? \n                <>\n                    {this.renderPreview()}\n                    <ProjectImageForm \n                    preview={this.preview}\n                    handleFileChange={this.handleFileChange}\n                    handleImageSubmit={this.handleImageSubmit}\n                    handleDelete={this.handleDelete}\n                    />\n                </>\n                :\n                 <div className=\"content-sub-div\">\n                    <img\n                        className=\"pj-image grid-1-4\"\n                        alt=\"\" \n                        src={`http://localhost:3000/${this.props.image.image}`}\n                    ></img>\n                    <LocalEditBtn \n                    editMode={this.state.editMode}\n                    toggleEditMode={this.toggleEditMode}\n                    />\n                </div>\n                 }\n                {/* <LocalDeleteBtn \n                    handleDelete={this.handleDelete}\n                /> */}\n            </div>\n        )\n    }\n}\nexport default ProjectImages"]},"metadata":{},"sourceType":"module"}